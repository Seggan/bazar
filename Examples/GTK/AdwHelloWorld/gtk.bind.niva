Project loadPackages: {"io.github.jwharm.javagi:gtk:0.9.0" "io.github.jwharm.javagi:adw:0.9.0"}

Bind package: "org.gnome.gtk" content: [
  type Application

  type Bitset // TODO
  type SelectionModel // TODO

  extend SelectionModel [
    on onActivate::[ -> ] -> Unit
    on run::List::String -> Unit
  ]

  enum Orientation = HORIZONTAL | VERTICAL // TODO не находит если поставитьь после
  /// WIDGETS
  union Widget = 
  | ApplicationWindow app: Application
  | Button
  | Entry 
  // | HeaderBar
  | Label str: String
  | Box orientation: Orientation spacing: Int
  | Grid

  @emit: """org.gnome.gtk.Application($1, org.gnome.gio.ApplicationFlags.DEFAULT_FLAGS)"""
  constructor Application name::String -> Application

  extend Application [
    on onActivate::[ -> ] -> Unit
    on run::List::String -> Unit
  ]


  

  enum Align = FILL | START | END | CENTER | BASELINE_FILL | BASELINE_CENTER
  enum PositionType = LEFT | RIGHT | TOP | BOTTOM

  // EVENTS
  enum ModifierType = ALT_MASK | SHIFT_MASK | CONTROL_MASK | BUTTON1_MASK
  union EventController = 
  | EventControllerKey

  EventControllerKey onKeyPressed::[Int, Int, ModifierType? -> Boolean] -> Unit




  // Widget
  Widget grabFocus -> Boolean
  Widget addCssClass::String -> Unit

  // ApplicationWindow
  extend ApplicationWindow [
    @emit: "$0.setDefaultSize($1, $2)"
    on x::Int y::Int -> Unit
    on present -> Unit
    on addController::EventController -> Unit
  ]

  // Button
  constructor Button withLabel::String -> Button
  constructor Button fromIconName::String -> Button
  Button onClicked::[ -> ] -> Unit
  
  // Box
  Box append::Widget -> Unit

  // Grid
  @rename: "attach"
  Grid attach::Widget col::Int row::Int w::Int h::Int -> Unit

  @rename: "attachNextTo"
  Grid attach::Widget nextTo::Widget position::PositionType w::Int h::Int -> Unit

] fields: [
  Widget
    halign: Align
    valign: Align
    vexpand: Boolean
    hexpand: Boolean 
    // heightRequest: Int // https://github.com/jwharm/java-gi/issues/97
    tooltipText: String
    // cssNames: Array::String // arrays needed, add when get static builders

  SelectionModel 
    selection: Bitset

  Label 
    text: String 

  Entry 
    text: String 
    textLength: Int 
    placeholderText: String 
    editable: Boolean
    wrap: Boolean
    alignment: Float
    maxWidthChars: Int
  
  Button 
    label: String
    iconName: String

  ApplicationWindow
    child: Widget
    title: String

  Grid 
    columnSpacing: Int
    columnHomogeneous: Boolean
    rowSpacing: Int
    rowHomogeneous: Boolean
] 



Bind package: "org.gnome.adw" content: [
  type Application
  extend Application [
    on onActivate::[ -> ] -> Unit
    on run::List::String -> Unit
  ]

  @emit: """org.gnome.adw.Application($1, org.gnome.gio.ApplicationFlags.DEFAULT_FLAGS)"""
  constructor Application name::String -> Application

  // https://gnome.pages.gitlab.gnome.org/libadwaita/doc/1.5/boxed-lists.html
  union AdwRow = 
  | ActionRow
  | ExpanderRow
  | EntryRow
  | PasswordRow // TODO
  | ComboRow // TODO
  | SpinRow // TODO
  | SwitchRow // TODO

  union org.gnome.gtk.Widget = 
  | ApplicationWindow app: Application
  | ^AdwRow
  | HeaderBar
  | PreferencesPage
  | PreferencesGroup
  | ToolbarView
  // Tabs
  | TabBar
  | TabView
  | TabPage
  | TabOverview

  // ApplicationWindow
  extend ApplicationWindow [
    @emit: "$0.setDefaultSize($1, $2)"
    on x::Int y::Int -> Unit
    on present -> Unit
    on addController::EventController -> Unit
  ]

  extend HeaderBar [
    on packEnd::Widget -> Unit
    on packStart::Widget -> Unit
  ]

  extend AdwRow [
    on addPrefix::Widget -> Unit
    on addSuffix::Widget -> Unit
    on remove::Widget -> Unit
  ]
  extend EntryRow [
    on onApply::[ -> ] -> Unit
  ]
  

  extend ExpanderRow [
    on addRow::Widget -> Unit
  ]

  extend ActionRow [
    on activate -> Unit
    on remove::Widget -> Unit
  ]

  extend PreferencesPage [
    on add::PreferencesGroup -> Unit
  ]

  // PreferencesGroup
  extend PreferencesGroup [
    on add::Widget -> Unit
    on remove::Widget -> Unit
  ]

  // ToolbarView
  extend ToolbarView [
    on addTopBar::Widget -> Unit
  ]

  // TabView
  extend TabView [
    @rename: "add"
    on add::Widget onPage::TabPage -> TabPage
    on append::Widget -> TabPage
    on prepend::Widget -> TabPage
    on appendPinned::Widget -> TabPage
    on closeOtherPages::TabPage -> Unit
    on closePage::TabPage -> Unit

    @rename: "closePageFinish"
    on closeFinish::TabPage confirm::Boolean -> Unit

    on getNPages::TabView -> Int
    on getNPinnedPages::TabView -> Int
    on getNthPage::Int -> TabPage
    on getPage::Widget -> TabPage

    // signls
    on onClosePage::[TabPage -> Boolean] -> Unit
    on onCreateWindow::[ -> TabView] -> Unit

    on onPageAttached::[ TabPage, Int -> ] -> Unit
    on onPageDetached::[ TabPage, Int -> ] -> Unit
    on onPageReordered::[ TabPage, Int -> ] -> Unit
    on onIndicatorActivated::[ TabPage -> ] -> Unit
  ]
  
  extend TabOverview [
    on onCreateTab::[ -> TabPage] -> Unit
  ]
  

] fields: [
  ToolbarView
    content: Widget

  HeaderBar
    titleWidget: Widget
  
  ApplicationWindow
    content: Widget
    title: String

  AdwRow // PreferencesRow
    child: Widget
    selectable: Boolean
    title: String
  EntryRow
    showApplyButton: Boolean
    textLength: Int
    text: String
    widthChars: Int
    maxWidthChars: Int
    activatesDefault: Boolean // Whether activating the embedded entry can activate the default widget
    // inputHints: InputHints // TODO
    // inputPurpose: InputPurpose // TODO
  ActionRow
    subtitle: String
    titleLines: Int

  ExpanderRow
    expanded: Boolean
    enableExpansion: Boolean

  PreferencesPage
    description: String

  PreferencesGroup 
    headerSuffix: Widget
    title: String

  TabOverview
    child: Widget
    enableNewTab: Boolean
    enableSearch: Boolean
    extraDragPreload: Boolean
    searchActive: Boolean
    view: TabView
    open: Boolean


  // Tabs
  TabView
    altohide: Boolean
    pages: SelectionModel
    nPages: Int
    nPinnedPages: Int
    tabsRevealed: Boolean // getter
    expandTabs: Boolean
    
  TabPage 
    parent: Widget
    selected: Boolean
    loading: Boolean
    keyword: String // for search
    liveThumbnail: Boolean // in odverview
    title: String

  TabBar
    autohide: Boolean
    view: TabView

  // ActionRow
    // child: Widget

]