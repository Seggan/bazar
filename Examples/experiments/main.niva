// type Pair
//     x: T
//     y: G

// Pair(MutableList::T, MutableList::T) forEach: block::[T, T -> Unit] = [
//     iterate = [x::MutableList::T, y::MutableList::T -> 
//         x forEachIndexed: [ i, first ->
//             second = y at: i
//             block T: first T: second
//         ]
//     ]
//     x count < y count
//         ifTrue:  [iterate x: x y: y]
//         ifFalse: [iterate x: y y: x]
// ]

// list1 = {1 2 3 4}
// list2 = {5 6 7}

// Pair x: list1 y: list2 |> forEach: [a, b ->
//     "$a + $b = ${a + b}" echo
// ]


a = {1 2 3}
b = {4 5 6}

makeIter = [arr::MutableList::Int ->
  mut b = 0
  [
    x = arr at: (b)
    b <- b inc
    x
  ]
]

zip = [left::[ -> Int], right::[ -> Int] ->
  [ {(left do) (right do)} ]
]

ai = makeIter arr: a
bi = makeIter arr: b
zipped = zip left: ai right: bi

zipped do echo
zipped do echo
zipped do echo



//MutableList::T forEachBreak::[T -> Boolean] -> Unit = [
//  this forEach: [
//    forEachBreak T: it |> not => ^
//  ]
//]
//
//{1 2 3} forEachBreak: [
//  it echo
//  false
//]
