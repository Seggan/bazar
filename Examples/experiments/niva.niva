// type TO
// constructor TO DO -> Nothing = Error throwWithMessage: "TODO"

// Int implementLater -> String = [
//   1 + 1
//   ^TO DO
// ]

// type Cat
//   name: String
//   age: Int

// Cat birthday = age <- age inc
// Cat changeName::String = name <- changeName

// cat = Cat name: "Timosha" age: 8

// cat echo
// cat birthday;
//     birthday;
//     changeName: "Dog" 
// cat echo


// arr = {1 2 3} add: 4; add: 5; echo
// arr add: 6
// arr echo


// Int double = this * this

// 2 double; double; double; echo


// union Container = HBox | VBox | Grid
// union Widget = Container | Atom
// union Object = Widget

// x = 3
// y = [
//     | x
//     | 1 => HBox new
//     | 2 => VBox new
//     | 3 => Atom new
//     |=> Grid new
// ] do

// >? y // print type
// y echo


// Boolean ifTrue2::[ -> T] ifFalse2::[ -> T] = | this 
// | true => ifTrue2 do
// | false => ifFalse2 do


// 5 > 4 ifTrue2: ["yes" echo] ifFalse2: ["nope" echo]

// mut i = 0
// [i < 3] whileTrue: [
//   i echo
//   i <- i inc
// ]



// "halloow niva" echo
// type Vehicle
// Vehicle description = "Something to take you places"
// vehicle = Vehicle new
// vehicle echo
// vehicle description echo

// 1..<3 forEach: [
//   it echo
// ]

// >? Boolean

// union D0 = D1 | D2
// union A0 = A1 | A2 | A3
// union B0 = B1 | D0 
// union C0 = A0 | B0

// foo = [c::C0 -> 
//   | c
//   | A0 => "a" echo
//   | B0 => "b" echo
// ]

// foo c: A2 new



// Int msgKeyword::String[Int, Int -> Unit] = 
//   msgKeyword this: "sas" Int: 1 Int: 2

// Int msgBinary::String[Int] = 
//   msgBinary this: "sas" Int: 2

// Int msgUnary::String[] = 
//   msgUnary this: "sas"


// String x::Int y::Int = "keyword" echo
// String + x::Int = "binary" echo
// String foo = "unary" echo

// 1 msgKeyword: &String x:y:
// 1 msgBinary: &String +
// 1 msgUnary: &String foo

// array = {1 2 3} map: &Int inc
// array echo


// Project target: "q"
// x = "sas"
// mut u::String = "Sas"


// y = | false && true && true && 5 && true && true && true && true && true && true
// | "sus" => 1
// | 23 + 2 + 5 => 2
// |=> 3


// x + 5



