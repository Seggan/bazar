// type COLOR
// constructor COLOR RED = "\u001B[31m"
// constructor COLOR CYAN = "\u001B[36m"
// constructor COLOR YEL = "\u001B[33m"
// constructor COLOR RESET = "\u001B[0m"
// constructor COLOR WHITE = "\u001B[37m"
// String red = COLOR RED + this + COLOR RESET 
// String yel = COLOR YEL + this + COLOR RESET 
// String cyan = COLOR CYAN + this + COLOR RESET 

// "Hello"yel + " World"red + "!"cyan |> echo


// type Assert 
// constructor Assert that::Any equals::Any -> Unit = [

//   that != equals => [
//     Error throwWithMessage: "Assertion failed: $that != $equals"
//   ]
// ]

// Assert that: "sas" equals: "sas"


union Shape x: Int y: Int =
    | Rectangle width: Int height: Int
    | Circle    radius: Int


constructor Double pi = 3.14

Shape getArea -> Double =
  | this
  | Rectangle => width * height |> toDouble
  | Circle => Double pi * (radius * radius) toDouble


x = Rectangle width: 2 height: 3 x: 0 y: 0
x getArea echo




union Node = 
| Sub left: Node right: Node
| Add left: Node right: Node
| Value v: Int


Node walk -> Int = | this
| Add => left walk + right walk
| Sub => left walk - right walk
| Value => v

Int Value = Value v: this

expr = Add 
  right: (
    Add 
      right: 10 Value
      left: (
        Sub 
          left: 40 Value
          right: 20 Value
      )
  )
  left: 40 Value

expr walk echo


