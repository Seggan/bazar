
errordomain MyError =
| Error1 text: String
| Error2 code: Int


type Person 
    name: String

Int personOrError -> Person!Error1 = [
    (Error1 text: "Hi ^_^") throw
    ^ Person name: "Alice"
]

Int sus  = [
    x = 1 personOrError orPANIC
    // x = 1 personOrError ifError: [
    //     | it
    //     | Error1 => [Person name: "-"]
    // ]
    // x = 1 personOrError 
    //     orValue: (Person name: "Alice")
    // x echo

]

map = #{1 "one" 2 "two"}
keys = map keys
values = map values
values add: "qwf"


union Vehicle = 
    | ^Car
    | Plane
    | Ship

union Car = RaceCar | Truck | PassengerCar

Vehicle printSpeed = | this
    | Plane => "fast" echo
    | Ship =>  "slow" echo
    | Car => [
        | this
        | RaceCar => "fast" echo
        | Truck => "slow" echo
        | PassengerCar => "medium" echo
    ]

Vehicle printSpeed2 = | this
    | RaceCar => "fast" echo
    | Truck => "slow" echo
    | PassengerCar => "medium" echo

    | Plane => "fast" echo
    | Ship => "slow" echo

// 1 sus
list = {1 2 3 4 5 6 7}
str = list asSequence |>
    filter: [it % 2 == 0] |> 
    map: [it * 10] |>
    joinTransform: [it + it |> toString]
    
//> 40, 80, 120
>str
//> 7
>list last

// list at: 2 put: 4 
// list echo
// maybeSecond = list atOrNull: 1
// real = maybeSecond unpackOrError


// Test math = [
//     1 / 0
// ]

// union Shape =
//     | Rectangle width: Int height: Int
//     | Circle    radius: Double

// constructor Double pi = 3.14
// Double square = this * this

// Shape getArea -> Double = 
//     | this // "this" is Shape here
//     | Rectangle => width * height |> toDouble
//     | Circle => Double pi * radius square

