Bind package: "java.lang" content: [
  type Math
  constructor Math cos::Double -> Double
  constructor Math sin::Double -> Double
  constructor Math round::Double -> Int
]

// dsl
Double sin -> Double = Math sin: this
Double cos -> Double = Math cos: this
Double round -> Double = Math round: this |> toDouble
Double roundTo1m -> Double = this round * 1000000.0 / 1000000.0

Int repeat::[Int -> ] = [
  this == 0 => ^
  repeat Int: this
  (this - 1) repeat: repeat
] 
// types
enum Color = Red | Green | Blue | Pupple | Black

type Coordinate x: Double y: Double
Double at::Double = Coordinate x: this y: at

type Path color: Color coord: Coordinate
constructor Path new = Path color: Color.Black coord: (0.0 at: 0.0)

type Turtle x: Double y: Double degree: Double path: MutableList::Path c: Color
constructor Turtle new = 
  Turtle x: 0.0 y: 0.0 degree: 0.0 path: {(Path new)} c: Color.Black

type Pixel v: Double
type Degree v: Double
Double pixels = Pixel v: this
Double degrees = Degree v: this
Double toRadius = this * 0.017453292519943295
Double negate = 0.0 - this


// Main part
extend Turtle [
  on forward: p::Pixel = [
    v = p v
    x <- x + v * degree toRadius cos
    y <- y + v * degree toRadius sin
    path add: (Path color: c coord: (x roundTo1m at: y roundTo1m))
  ]
  // backward is - forward
  on backward: p::Pixel = 
    this forward: p v negate pixels
  
  on right: d::Degree = [
    degree <- (degree + d v) % 360.0
  ]
  // left is - right
  on left: d::Degree = 
    this right: d v negate degrees
  
  on color: color::Color = [c <- color]
]

builder Turtle repeat times::Int -> Turtle = [
  t = Turtle new
  times repeat: [
    build this: t
  ]
  ^t
] 

turtle = repeat (times: 4) [
  .color: Color.Red
  .forward: 100.0 pixels
  .left: 90.0 degrees
]

turtle path forEach: [
  it coord echo
]
